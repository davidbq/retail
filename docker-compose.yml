services:
  retail-service:
    build: ./backend/retail-service
    container_name: retail-retail-service
    ports:
      - "3000:3000"
    depends_on:
      - mongo-server
    networks:
      - retail-mongo-network

  mongo-server:
    build:
      context: ./database
      dockerfile: Dockerfile.mongo-server
    container_name: mongo-server
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - retail-mongo-network

  mongo-client:
    build:
      context: ./database
      dockerfile: Dockerfile.mongo-client
    container_name: mongo-client
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongo-server
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongo-server
    networks:
      - retail-mongo-network

  customers-service:
    container_name: customers-service
    build: ./backend/customers-service
    ports:
      - "3001:3000"
    environment:
     AWS_ACCESS_KEY_ID: 'dummy'
     AWS_SECRET_ACCESS_KEY: 'dummy'
    depends_on:
      - customers-db
    networks:
      - customers-network

  customers-db:
    container_name: customers-db
    build: ./database/customers-db
    restart: always
    user: root
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      AWS_REGION: 'local'
    ports:
      - "8000:8000"
    volumes:
     - customers_data:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep 400',
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - customers-network

  customers-db-init:
    container_name: customers-db-init
    image: amazon/aws-cli
    depends_on:
      customers-db:
        condition: service_healthy
    volumes:
      - ./database/customers-db/init-schema.json:/tmp/dynamodb/init-schema.json
      - ./database/customers-db/init-data.json:/tmp/dynamodb/init-data.json
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      AWS_REGION: 'local'
    entrypoint:
      - bash
    command:
      - '-c'
      - |
        if ! aws dynamodb describe-table --table-name dev-Customers --endpoint-url http://customers-db:8000 2>/dev/null; then
          echo "Table does not exist. Creating table and inserting data.";
          aws dynamodb create-table --cli-input-json file:///tmp/dynamodb/init-schema.json --endpoint-url http://customers-db:8000 &&
          aws dynamodb batch-write-item --request-items file:///tmp/dynamodb/init-data.json --endpoint-url http://customers-db:8000;
        else
          echo "Table already exists. Skipping creation and data insertion.";
        fi
    networks:
      - customers-network

volumes:
  mongodb_data:
  customers_data:

networks:
  retail-mongo-network:
  customers-network:
