version: '3.8'

services:
  retail-service:
    container_name: retail-retail-service
    build: ./backend/retail-service
    ports:
      - "3000:3000"
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
    networks:
      - retail-network
    restart: always
    depends_on:
      - retail-db

  retail-db:
    container_name: retail-db
    build: ./database/retail-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
    volumes:
      - retail_data:/data/db
      - ./database/retail-db/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - retail-network
    restart: always

  customers-service:
    container_name: customers-service
    build: ./backend/customers-service
    ports:
      - "3001:3000"
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
    networks:
      - customers-network
    depends_on:
      - customers-db

  customers-db:
    container_name: customers-db
    build: ./database/customers-db
    restart: always
    user: root
    ports:
      - "8000:8000"
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      AWS_REGION: 'local'
    volumes:
      - customers_data:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep 400',
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - customers-network

  customers-db-init:
    container_name: customers-db-init
    image: amazon/aws-cli
    depends_on:
      customers-db:
        condition: service_healthy
    volumes:
      - ./database/customers-db/init-schema.json:/tmp/dynamodb/init-schema.json
      - ./database/customers-db/init-data.json:/tmp/dynamodb/init-data.json
    environment:
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      AWS_REGION: 'local'
    entrypoint:
      - bash
    command:
      - '-c'
      - |
        if ! aws dynamodb describe-table --table-name dev-Customers --endpoint-url http://customers-db:8000 2>/dev/null; then
          echo "Table does not exist. Creating table and inserting data.";
          aws dynamodb create-table --cli-input-json file:///tmp/dynamodb/init-schema.json --endpoint-url http://customers-db:8000 &&
          aws dynamodb batch-write-item --request-items file:///tmp/dynamodb/init-data.json --endpoint-url http://customers-db:8000;
        else
          echo "Table already exists. Skipping creation and data insertion.";
        fi
    networks:
      - customers-network

volumes:
  retail_data:
  customers_data:

networks:
  retail-network:
  customers-network: